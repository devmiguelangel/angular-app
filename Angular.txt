#########################################

1.	Que es AngularJS
- Es un framework estructural
- Creado por Google
- Basado en JavaScript
- Crear aplicaciones web dinamicas
- Elementos graficos - Logica y datos - Conexion a datos
- Arquitectura
Modelo-Vista-Controlador
Directivas HTML
Inyeccion de dependencias
- Caracteristicas
Materiales y recursos
No agrega componentes graficos o CSS
Liviano y eficiente
Coexiste con otros frameworks

2.	Instalacion de AngularJS
2.1.	Instalacion de AngularJS
- https://angularjs.org/
- index.html
<script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.4.1/angular.min.js"></script>
<body ng-app>
</body>

3.	Expresiones en AngularJS
3.1.	Insertamos expresiones en AngularJS
- Las expresiones es la forma que AngularJS tiene de representar valores dentro de HTML

<p> {{ 'Hola mundo' }} </p>
<p> {{ (49 + 3) * 7 + 1 }} </p>

3.2.	Uso de filtros en AngularJS
- Los filtros permiten realizar procesos dentro de una expresion
<ul>
	<li>Apio {{ 50 | currency }}</li>
	<li>Brocoli {{ 50 | currency:"€" }} </li>
	<li>Espinaca {{ 50 + 10 | currency:"c" }} importada desde la {{ 'INdia' | uppercase }} </li>
</ul>

4.	Directivas en AngularJS
4.1.	Como funcionan las directivas
- Permiten controlar o modificar un documento HTML
<body ng-app  ng-controller="controlador1">

<div ng-show="true">
	Esto es un documento HTML estatico
</div>

<button ng-click="controladorBoton()" ng-show="false">
	Click
</button>

4.2.	Directivas y estandares web
http://validator.w3.org/
data-ng-app

5.	Manipulacion de datos - Data Binding
- Sincronizar en tiempo real entre los datos del modelo y la vista
<input type="text" ng-model="name" >
<h1> {{ name }} </h1>

6.	Controladores en AngularJS
- Los controladores se encargan de controlar los datos de la Vista
- Los controladores pueden coexistir y reciclarse
- Los metodos nos permiten insertar subprocesos dentro de un controlador

<div ng-controller="controlador1">
	<h1>Promoción de mangos</h1>
	<h2>$2.15 cada uno</h2>

	<label>Cantidad de Mangos:</label>
	<input type="text" ng-model="cantidad" >
	
	<br>

	Precio Total: {{ cantidad * precio | currency }}
</div>
<hr>

<div ng-controller="controlador2">
	{{ nombre }}
</div>
<hr>

<div ng-controller="circunferencia">
	<label>Diametro</label>
	<input type="text" ng-model="diametro">
	<button ng-click="calcularCircunferencia()">Calcular Circunferencia</button>
	<br>
	{{ circunferencia }}

</div>

<script type="text/javascript">
	var app = angular.module('v2bApp', []);

	app.controller('controlador1', ['$scope', function($scope){
		$scope.cantidad = 0;
		$scope.precio 	= 2.15;
	}]);

	app.controller('controlador2', ['$scope', function($scope){
		$scope.nombre = 'Miki';
	}]);

	app.controller('circunferencia', ['$scope', function($scope){
		var pi = 3.14;

		$scope.calcularCircunferencia = function () {
			$scope.circunferencia = $scope.diametro * pi;
		};
	}]);
</script>

7.	Listas en AngularJS
7.2.	Representar colecciones de datos
<div ng-controller="controlador1">
	<h1>Nombres</h1>

	<ul>
		<li ng-repeat="nombre in nombres">
			{{ nombre }}
		</li>
	</ul>

	<h1>Heroes</h1>
	<ul>
		<li ng-repeat="heroe in heroes">
			{{ heroe.nombre + ' ' + heroe.apellido }}
		</li>
	</ul>
</div>

<script type="text/javascript">
	var app = angular.module('v2bApp', []);

	app.controller('controlador1', ['$scope', function($scope){
		$scope.nombres = [ 'Miguel', 'Carlos', 'Juan' ];

		$scope.heroes = [
			{
				nombre: 'Arnold',
				apellido: 'Schwarzenegger'
			},
			{
				nombre: 'Sylvester',
				apellido: 'Stallone'
			},
			{
				nombre: 'Chuck',
				apellido: 'Norris'
			}
		];
	}]);
</script>

7.3.	Filtrado de datos
<div ng-controller="controlador2">
	<h1>Agenda Telefónica</h1>
	
	<label>Buscar: </label>
	<input type="search" ng-model="busqueda">

	<p ng-repeat="entrada in agenda | filter:busqueda">
		{{ entrada.nombre }} : {{ entrada.telefono }}
	</p>
</div>

<script type="text/javascript">
	var app = angular.module('v2bApp', []);

	app.controller('controlador2', ['$scope', function($scope){
		$scope.agenda = [
			{nombre:'Lincy',    telefono:'01-2250-1675'},
            {nombre:'Alexei',   telefono:'01-9250-5345'},
            {nombre:'Pizzeria', telefono:'800-NG-PIZZA'},
            {nombre:'Natalia',  telefono:'01-4250-2465'},
            {nombre:'Natalia',  telefono:'01-8650-1575'},
            {nombre:'Karol',    telefono:'01-1240-6875'},
            {nombre:'Ivanner',  telefono:'01-2950-3679'},
            {nombre:'Josue',    telefono:'01-8250-4805'}
		];
	}]);

</script>

8.	Interaccion con AngularJS - Administrar eventos en AngularJS
ng-click="expression" 
ng-dblclick="expression" 
ng-mouseleave="expression" 
ng-mouseover="expression"

9.	Modificar documentos con AngularJS
9.1.	CSS y AngularJS
<p ng-style="nuevoEstilo">
	 Yo controlo el estilo de mis aplicaciones con 
	 <span ng-class="nuevaClase">AngularJS</span> 
</p>

<script type="text/javascript">
	var app = angular.module('v2bApp', []);

	app.controller('controlador1', ['$scope', function($scope){
		$scope.newStyle = function () {
			$scope.nuevoEstilo = { 'background' : 'blue', 'color' : 'yellow' };
		};

		$scope.newClass = function () {
			$scope.nuevaClase = 'angular';
		};

		$scope.resetClass = function () {
			$scope.nuevoEstilo 	= '';
			$scope.nuevaClase 	= '';
		};
	}]);
</script>

9.2.	Mostrar y ocultar elementos
<button ng-click="showMess()">Mostrar Mensaje</button>
<button ng-click="hiddenMess()">Ocultar Mensaje</button>

<div class="alerta" ng-show="visibilidadMensaje">
	Este es un mensaje secreto
</div>

<script type="text/javascript">
	var app = angular.module('v2bApp', []);

	app.controller('controlador1', ['$scope', function($scope){
		$scope.visibilidadMensaje = false;

		$scope.showMess = function () {
			$scope.visibilidadMensaje = true;
		};

		$scope.hiddenMess = function () {
			$scope.visibilidadMensaje = false;
		};

	}]);
</script>

9.3.	Intercambiar imagenes
<img ng-src=" {{ imageData }} ">
		
		<button ng-click="cambiarImagen('ejemplo1.png')">Imagen 1</button>
		<button ng-click="cambiarImagen('ejemplo2.png')">Imagen 2</button>
<script type="text/javascript">
	var app = angular.module('v2bApp', []);

	app.controller('controlador1', ['$scope', function($scope){
		$scope.imageData = 'ejemplo1.png';

		$scope.cambiarImagen = function (imagen) {
			$scope.imageData = imagen;
		};

	}]);
</script>

10.	Routing con AngularJS
10.1	Incluir datos externos
<script src="https://code.angularjs.org/1.3.16/angular-route.min.js"></script>
<div ng-include src=" 'plantillas/encabezado.html' "></div>
<div ng-include=" 'plantillas/menu.html' "></div>
<h1>Visita el NG-ZOO</h1>
	
10.2	Administramos rutas
<div ng-view></div>
<ul class="menu">
	<li><a href="#/ave1">Ave 1</a></li>
	<li><a href="#/ave2">Ave 2</a></li>
	<li><a href="#/ave3">Ave 3</a></li>
</ul>

<script type="text/javascript">
	var app = angular.module('v2bApp', [ 'ngRoute' ]);

	app.config(['$routeProvider',function($routeProvider) {
		$routeProvider.when('/hola', {
			templateUrl : 'hola.html'
		})
		.when('/ave1', {
			templateUrl : 'plantillas/ave1.html'
		})
		.when('/ave2', {
			templateUrl : 'plantillas/ave2.html'
		})
		.when('/ave3', {
			templateUrl : 'plantillas/ave3.html'
		})
		.otherwise({
			templateUrl : 'bienvenida.html'
		});
	}]);
</script>

11.	AngularJS y Bootstrap - Instalacion de Bootstrap y AngularJS
<head>
	<title>Angular - Bootstrap</title>
	<meta charset="utf-8">
	<meta http-equiv="X-UA-Compatible" content="IE=edge">
	<meta name="viewport" content="width=device-width, initial-scale=1">

	<!-- Latest compiled and minified CSS -->
	<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/css/bootstrap.min.css">

	<!-- Optional theme -->
	<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/css/bootstrap-theme.min.css">

	<script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.4.1/angular.min.js"></script>
	<script src="https://code.angularjs.org/1.3.16/angular-route.min.js"></script>

</head>
<body ng-app="v2bApp" ng-controller="controlador1">
	
	<div ng-include=" 'menu.html' " ></div>

	<div class="jumbotron">
	    <div class="container">
	        <h1>Bienvenido al NG-ZOO</h1>
	       
	    	<input type="text" class="form-control" placeholder="Animal" 
	    		aria-describedby="basic-addon1" ng-model="animal_extra">
			
			<button type="button" class="btn btn-success" ng-click="appendAnimal()">Agregar</button>
	    </div>

	</div>

	<div class="container">
	    <ul class="list-group">
			<li class="list-group-item" ng-repeat="animal in animales">
				{{ animal }}
			</li>
        </ul>
	</div>

</body>
<script src="http://code.jquery.com/jquery.js"></script>
<!-- Latest compiled and minified JavaScript -->
<script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/js/bootstrap.min.js"></script>

<script type="text/javascript">

var app = angular.module('v2bApp', [ 'ngRoute' ]);

app.controller('controlador1', ['$scope', function($scope){
	$scope.animales = [
		'Tigre',
		'Elefante',
		'Mono',
		'Oso',
		'Rinoceronte'
	];

	$scope.appendAnimal = function () {
		$scope.animales.push($scope.animal_extra);
	};

}]);

</script>

12.	Scafolding con AngularJS - Crear proyectos AngularJS con Yeoman
- Yeoman: El propósito principal de esta herramienta es la agilización del proceso del inicio del desarrollo, esto mediante la construcción de un esqueleto bastante completo para cualquier tipo de aplicación web, este procedimiento también es conocido como scaffolding.

- Bower: para el manejo de dependencias
- Grunt: para la previsualización, ejecución de pruebas y construcción de la aplicación.
- Yo: para construir el esqueleto de la aplicación dependiendo de su tipo.

npm install -g yo bower grunt-cli gulp
mkdir appAngular
npm install -g generator-angular
yo angular [app_name]
bower install
grunt serve

---------------------------------------------
1.	Introduccion
- Es un framework MVW
- Framework (Sowtware general que puede ser selectivamente modificado por codigo adicional del usuario para crear software especifico) - (Universal - Reusable - Facilita el desarrollo)
- MVW (Model - View - Whatever works for you)
- Cuando usar AngularJS
	- Las vistas se construyen a partir de ciertos datos
	- Las vistas modifican los datos de la aplicacion
	- La app consume datos de una REST API
	- Tiene logica compleja en el JS de la app
- Conceptos principales de AngularJS
	- Directives - HTML con super poderes
	- Controllers - Contiene la logica de la app via $scope
	- Factories y Services - Organiza y comparte codigo en la app
	- Filters - Dan formatos a los datos cuando son presentados

2.	Hola mundo
- https://angularjs.org/

<script type="text/javascript" src="https://ajax.googleapis.com/ajax/libs/angularjs/1.4.1/angular.min.js"></script>
<body ng-app>
	{{ 'Hola ' + 'Mundo' }}
</body>

3.	Primer Controlador
<body ng-app="cfApp">
<div ng-controller="FirstController">
	{{ 'Hola ' + nombre }}
</div>
</body>

<script type="text/javascript" src="js/controller.js"></script>

var app = angular.module('cfApp', []);

app.controller('FirstController', ['$scope', function($scope){
	$scope.nombre = 'Miguel';
}]);

4.	Modulos
- var app = angular.module('cfApp', [" Dependencias "]);

5.	Two Way Data Binding y ngModel
- Data Binding es la sincronizacion entre el modelo y la vista

<div ng-controller="FirstController">
	<label>Comentario: </label><input type="text" ng-model="comment_new.comment">
	<br>
	<label>Usuario: </label><input type="text" ng-model="comment_new.user">
	<br>
	<button ng-click="newComment()">Nuevo Comentario</button>
	
	<br>
	<ul>
		<li ng-repeat="comment in comments">
			{{ comment.comment }} - <strong>{{ comment.user }}</strong>
		</li>
	</ul>
</div>

app.controller('FirstController', ['$scope', function($scope){
	$scope.comment_new = {
		comment: 	"",
		user:		""
	};

	$scope.comments = [
		{
			comment:	'Buen Tutorial',
			user:		'miguel'
		},
		{
			comment:	'Mal Tutorial',
			user:		'juan'
		}
	];

	$scope.newComment = function () {
		$scope.comments.push($scope.comment_new);
		$scope.comment_new = {
			comment: 	"",
			user:		""
		};
	};

}]);

6.	Dependency Injection
- Las dependencias q se generan o crean se las pueden incrustar en los controlador o el modulo
- Ruby on Rails minifica automaticamente el JS

app.controller('Controller', '$scope', 'dep1', 'dep2', function($scope, dep1, dep2){ ... 

7.	Ajax con $http
- $http es un core de Angular que facilita la comunicacion asincrona con servidores remotos a travez de XMLHttpRequest o JSON

<div ng-controller="AjaxController">
	<ul>
		<li ng-repeat="post in posts">
			<h3>
				{{ post.title }}
			</h3>
			<p>
				{{ post.body }}
			</p>
		</li>
	</ul>

	<label>Title: </label>
	<input type="text" ng-model="newPost.title">
	<br>
	<label>Body: </label>
	<input type="text" ng-model="newPost.body">
	<br>
	<button ng-click="addPost()">Enviar Post</button>
	<br>

</div>

app.controller('AjaxController', ['$scope', '$http', function($scope, $http){
	$scope.newPost = {
		title:	'',
		body:	''
	};

	$scope.posts = [];

	$http.get('http://jsonplaceholder.typicode.com/posts')
		.success(function (data) {
			$scope.posts = data;

			console.log(data);
		})
		.error(function (err) {
			// body...
		});

	$scope.addPost = function () {
		$http.post('http://jsonplaceholder.typicode.com/posts', {
			title:	$scope.newPost.title,
			body:	$scope.newPost.body,
			userId:	1,
		})
			.success(function (data, status, headers, config) {
				console.log(data);
				$scope.posts.push(data);
			})
			.error(function (err, status, headers, config) {
				console.log(err);
			});
	};
}]);

9.	Crear un To Do list
<script type="text/javascript" src="js/lib/angular-local-storage.min.js"></script>
<div ng-controller="toDoListController">
	<ul>
		<li ng-repeat="activity in activities">
			{{ activity.description }} - {{ activity.datetime | date:'dd/MM/yyyy HH:mm:ss' }}
		</li>
	</ul>
	
	<form ng-submit="addActivity()">
		<input type="text" ng-model="newActivity.description">
		<input type="datetime-local" ng-model="newActivity.datetime">
		<input type="submit" value="Nueva Actividad">
	</form>
	<br>

	<button ng-click="cleanActivities()">Clean</button>
</div>

var app = angular.module('toDoListApp', ['LocalStorageModule']);

app.controller('toDoListController', ['$scope', 'localStorageService', function($scope, localStorageService){
	
	$scope.newActivity 	= {
		description:	'',
		datetime:		''
	};

	$scope.activities 	= [];

	if (localStorageService.get('activities')) {
		$scope.activities = localStorageService.get('activities');
	}

	$scope.addActivity = function () {
		$scope.activities.push($scope.newActivity);
		// localStorageService.set('activities', $scope.activities);

		$scope.newActivity 	= {
			description:	'',
			datetime:		''
		};

	};

	$scope.cleanActivities = function() {
		$scope.activities 	= [];
		localStorageService.remove('activities');
	};

	$scope.$watchCollection('activities', function (newCollection, oldCollection) {
		localStorageService.set('activities', newCollection);
	});

}]);

10.	Filters
<div ng-controller="filtersController">
	{{ moneda | removeHtml | currency }}
</div>

var cfApp = angular.module('cfApp', []);

cfApp.filter('removeHtml', function () {
	return function (text) {
		return String(text).replace(/<[^>]*>?/g, '');
	};
});

cfApp.controller('filtersController', ['$scope', function($scope){
	$scope.moneda = '<p>3</p>'
}]);


11.	$apply - $digest - $watch
- Angular Context - Captura eventos para despues actualizar la pagina automaticamente
- $ aplicar () se utiliza para ejecutar una expresión en angular desde fuera del marco angular. (Por ejemplo, de eventos DOM del navegador, setTimeout, XHR o bibliotecas de terceros).
- Digest - Actualiza automaticamente la vista y el controlador
- Watchers - Lista de atributos en el UI que Angular observa a que cambien

<div ng-controller="appController">
	<h1>{{ nombre }}</h1>

	<button id="btn_name">Cambiar Nombre</button>
</div>

angular.module('cfApp', [])
	.controller('appController', ['$scope', function($scope){
		$scope.nombre = 'Miguel';

		/*setTimeout(function () {
			$scope.$apply(function () {
				$scope.nombre = 'Angel';
			});

			console.log($scope.nombre);
		}, 2000);*/

		document.getElementById('btn_name').addEventListener('click', function () {
			$scope.$apply(function () {
				$scope.nombre = 'Angel';
			});
			
			console.log($scope.nombre);
		});
	}]);


12.	ngHide - ngShow
<style type="text/css">
.animated {
	opacity: 1;
	max-height: auto !important;
	overflow: hidden;
	transition: all 2s;
}

.animated.ng-hide {
	opacity: 0;
	max-height: 0px !important;
	display: block !important;
}
</style>

<div ng-controller="AjaxController">
	<div ng-show="loader">Cargando ...</div>
	<div ng-show="loader || posts <= 0">No existen resultados</div>

	<ul ng-show="posts.length > 0" class="animated">
		<li ng-repeat="post in posts">
			<h3>
				{{ post.title }}
			</h3>
			<p>
				{{ post.body }}
			</p>
		</li>
	</ul>
</div>

$scope.loader = true;

$http.get('http://jsonplaceholder.typicode.com/posts')
	.success(function (data) {
		$scope.posts = data;

		console.log(data);
		$scope.loader = false;
	})
	.error(function (err) {
		$scope.loader = false;
	});

13.	$rootScope y Child Controllers
<div ng-controller="FirstController">
	{{ nombre }}

	<p><h2>
		{{ $parent.nombre }}
	</h2></p>

	<div ng-controller="SecondController">
		<p>{{ nombre }}</p>

		<input type="text" ng-model="$parent.nombre">
	</div>
</div>

<script type="text/javascript">
var app = angular.module('cfApp', []);

app.run(['$rootScope', function($rootScope){
	$rootScope.nombre = 'Miguel';
}]);

app.controller('FirstController', ['$scope', function($scope){
	$scope.nombre = 'Angel';
}]);

app.controller('SecondController', ['$scope', function($scope){
	$scope.nombre = 'Mamani';
}]);
</script>

14.	Factories
- Factory - Estructurar un objeto y lo retorna (Se puede definir un constructor al objeto)

<div ng-controller="toDoListController">
	<ul>
		<li ng-repeat="activity in activities">
			{{ activity.description }} - {{ activity.datetime | date:'dd/MM/yyyy HH:mm:ss' }}
			<a href="" style="text-decoration: none; color: red;" ng-click="removeActivity(activity)"> X </a>
		</li>
	</ul>
	
	<form ng-submit="addActivity()">
		<input type="text" ng-model="newActivity.description">
		<input type="datetime-local" ng-model="newActivity.datetime">
		<input type="submit" value="Nueva Actividad">
	</form>
	<br>

	<button ng-click="cleanActivities()">Clean</button>

</div>

var app = angular.module('toDoListApp', ['LocalStorageModule']);

app.factory('ListService', ['localStorageService', function(localStorageService){
	var listService = {};

	listService.key = 'activities';

	if (localStorageService.get(listService.key)) {
		listService.activities = localStorageService.get(listService.key);
	} else{
		listService.activities = [];
	}

	listService.addActivity = function (newActivity) {
		listService.activities.push(newActivity);
		listService.updateActivities();
	};

	listService.updateActivities = function () {
		localStorageService.set(listService.key, listService.activities);
	};

	listService.cleanActivities = function () {
		listService.activities = [];
		listService.updateActivities();
	}

	listService.removeActivity = function (item) {
		listService.activities = listService.activities.filter(function (activity) {
			return item != activity;
		});

		listService.updateActivities();

		return listService.getActivities();
	}

	listService.getActivities = function () {
		return listService.activities;
	}

	return listService;

}])

app.controller('toDoListController', ['$scope', 'localStorageService', 'ListService', 
	function($scope, localStorageService, ListService){
	
	$scope.newActivity 	= {
		description:	'',
		datetime:		''
	};

	$scope.activities 	= ListService.getActivities();

	$scope.addActivity = function () {
		ListService.addActivity($scope.newActivity);

		$scope.newActivity 	= {
			description:	'',
			datetime:		''
		};

	};

	$scope.cleanActivities = function() {
		ListService.cleanActivities();
		// localStorageService.remove('activities');
	};

	$scope.removeActivity = function (activity) {
		$scope.activities = ListService.removeActivity(activity);
	};

}]);

15.	Services
Factory - Se ejecuta como una funcion y retorna un valor
Service - Se ejecuta como un modelo y retorna un objeto

app.service('ListService', ['localStorageService', function(localStorageService){
	this.key = 'activities';

	if (localStorageService.get(this.key)) {
		this.activities = localStorageService.get(this.key);
	} else{
		this.activities = [];
	}

	this.addActivity = function (newActivity) {
		this.activities.push(newActivity);
		this.updateActivities();
	};

	this.updateActivities = function () {
		localStorageService.set(this.key, this.activities);
	};

	this.cleanActivities = function () {
		this.activities = [];
		this.updateActivities();
	};

	this.removeActivity = function (item) {
		this.activities = this.activities.filter(function (activity) {
			return item != activity;
		});

		this.updateActivities();

		return this.getActivities();
	};

	this.getActivities = function () {
		return this.activities;
	};
}]);

16.	ngEvents - ngClass
<button ng-mouseenter="flag = true" ng-mouseleave="flag = false" ng-class="{'hover': flag, 'no-hover': !flag}">Hola</button>
<br>
<span>{{ flag | json }}</span>

17.	ngSrc - ngCloak
ngSrc - El navegador mp recupera la URL hasta que AngularJS lo sustituye
ngCloak - Oculta el elemento hasta que se haya compilado el template

<ul ng-cloak>
	<li ng-repeat="repo in repos">
		<img ng-src="{{ repo.owner.avatar_url }}" width="100">
		<h2> {{ repo.full_name }} </h2>
	</li>
</ul>

app.controller('AjaxController', ['$scope', '$http', function($scope, $http){
	$scope.repos = [];

	$http.get('https://api.github.com/users/djmiguelarango/repos')
		.success(function (data) {
			$scope.repos = data;

			console.log(data);
		})
		.error(function (err) {
			console.log(err);
		});
}]);

18.	Crear Directivas
<ul ng-cloak>
	<li ng-repeat="repo in repos">
		<div class="circular" bg-image="{{ repo.owner.avatar_url }}"></div>
		<h2> {{ repo.full_name }} </h2>
	</li>
</ul>

app.directive('bgImage', function(){
	return function (scope, element, attrs) {
		attrs.$observe('bgImage', function (value) {
			element.css({
				"background" 		: "url(" + value + ")",
				"background-size"	: "cover",
				"background-position" : "center"
			});
		});
	};
});


19.	Directivas Personalizadas
<link rel="stylesheet" type="text/css" href="http://code.jquery.com/ui/1.11.4/themes/smoothness/jquery-ui.css">
<script type="text/javascript" src="https://ajax.googleapis.com/ajax/libs/angularjs/1.4.1/angular.min.js"></script>
<script type="text/javascript" src="http://code.jquery.com/jquery-2.1.4.min.js"></script>
<script type="text/javascript" src="http://code.jquery.com/ui/1.11.4/jquery-ui.min.js"></script>

<input type="text" my-autocomplete="repos" placeholder="Buscar Repositorio">

<ul ng-cloak>
	<li ng-repeat="post in posts" ng-hide="main_repo && main_repo != post.name">
		<!-- <img ng-src="{{ repo.owner.avatar_url }}" width="100"> -->
		<div class="circular" bg-image="{{ post.owner.avatar_url }}"></div>
		<h2> {{ post.full_name }} </h2>
	</li>
</ul>

app.directive('myAutocomplete', function(){
	function link ($scope, element, attrs) {
		$(element).autocomplete({
			source: $scope[attrs.myAutocomplete],
			select: function (e, ui) {
				e.preventDefault();
				if (ui.item) {
					$scope.optionSelected(ui.item.value);
				};
			},
			focus: function (e, ui) {
				e.preventDefault();
				$(this).val(ui.item.label);
			}
		});
	};

	return {
		link: link
	};
});

app.controller('AjaxController', ['$scope', '$http', function($scope, $http){
	$scope.repos = [];
	$scope.posts = [];

	$http.get('https://api.github.com/users/djmiguelarango/repos')
		.success(function (data) {
			$scope.posts = data;

			for (var i = data.length - 1; i >= 0; i--) {
				var repo = data[i];
				$scope.repos.push(repo.name);

			};

			console.log(data);
		})
		.error(function (err) {
			console.log(err);
		});

	$scope.optionSelected = function (data) {
		$scope.$apply(function() {
			$scope.main_repo = data;
		});
	};
}]);

20.	ngRoute (SPA apps)



21.	Practica Final
22.
23.



#########################################


#########################################


### 00:14:00 - 00:00:00

##########################################


##########################################




