#########################################

1.	Que es AngularJS
- Es un framework estructural
- Creado por Google
- Basado en JavaScript
- Crear aplicaciones web dinamicas
- Elementos graficos - Logica y datos - Conexion a datos
- Arquitectura
Modelo-Vista-Controlador
Directivas HTML
Inyeccion de dependencias
- Caracteristicas
Materiales y recursos
No agrega componentes graficos o CSS
Liviano y eficiente
Coexiste con otros frameworks

2.	Instalacion de AngularJS
2.1.	Instalacion de AngularJS
- https://angularjs.org/
- index.html
<script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.4.1/angular.min.js"></script>
<body ng-app>
</body>

3.	Expresiones en AngularJS
3.1.	Insertamos expresiones en AngularJS
- Las expresiones es la forma que AngularJS tiene de representar valores dentro de HTML

<p> {{ 'Hola mundo' }} </p>
<p> {{ (49 + 3) * 7 + 1 }} </p>

3.2.	Uso de filtros en AngularJS
- Los filtros permiten realizar procesos dentro de una expresion
<ul>
	<li>Apio {{ 50 | currency }}</li>
	<li>Brocoli {{ 50 | currency:"€" }} </li>
	<li>Espinaca {{ 50 + 10 | currency:"c" }} importada desde la {{ 'INdia' | uppercase }} </li>
</ul>

4.	Directivas en AngularJS
4.1.	Como funcionan las directivas
- Permiten controlar o modificar un documento HTML
<body ng-app  ng-controller="controlador1">

<div ng-show="true">
	Esto es un documento HTML estatico
</div>

<button ng-click="controladorBoton()" ng-show="false">
	Click
</button>

4.2.	Directivas y estandares web
http://validator.w3.org/
data-ng-app

5.	Manipulacion de datos - Data Binding
- Sincronizar en tiempo real entre los datos del modelo y la vista
<input type="text" ng-model="name" >
<h1> {{ name }} </h1>

6.	Controladores en AngularJS
- Los controladores se encargan de controlar los datos de la Vista
- Los controladores pueden coexistir y reciclarse
- Los metodos nos permiten insertar subprocesos dentro de un controlador

<div ng-controller="controlador1">
	<h1>Promoción de mangos</h1>
	<h2>$2.15 cada uno</h2>

	<label>Cantidad de Mangos:</label>
	<input type="text" ng-model="cantidad" >
	
	<br>

	Precio Total: {{ cantidad * precio | currency }}
</div>
<hr>

<div ng-controller="controlador2">
	{{ nombre }}
</div>
<hr>

<div ng-controller="circunferencia">
	<label>Diametro</label>
	<input type="text" ng-model="diametro">
	<button ng-click="calcularCircunferencia()">Calcular Circunferencia</button>
	<br>
	{{ circunferencia }}

</div>

<script type="text/javascript">
	var app = angular.module('v2bApp', []);

	app.controller('controlador1', ['$scope', function($scope){
		$scope.cantidad = 0;
		$scope.precio 	= 2.15;
	}]);

	app.controller('controlador2', ['$scope', function($scope){
		$scope.nombre = 'Miki';
	}]);

	app.controller('circunferencia', ['$scope', function($scope){
		var pi = 3.14;

		$scope.calcularCircunferencia = function () {
			$scope.circunferencia = $scope.diametro * pi;
		};
	}]);
</script>

7.	Listas en AngularJS
7.2.	Representar colecciones de datos
<div ng-controller="controlador1">
	<h1>Nombres</h1>

	<ul>
		<li ng-repeat="nombre in nombres">
			{{ nombre }}
		</li>
	</ul>

	<h1>Heroes</h1>
	<ul>
		<li ng-repeat="heroe in heroes">
			{{ heroe.nombre + ' ' + heroe.apellido }}
		</li>
	</ul>
</div>

<script type="text/javascript">
	var app = angular.module('v2bApp', []);

	app.controller('controlador1', ['$scope', function($scope){
		$scope.nombres = [ 'Miguel', 'Carlos', 'Juan' ];

		$scope.heroes = [
			{
				nombre: 'Arnold',
				apellido: 'Schwarzenegger'
			},
			{
				nombre: 'Sylvester',
				apellido: 'Stallone'
			},
			{
				nombre: 'Chuck',
				apellido: 'Norris'
			}
		];
	}]);
</script>

7.3.	Filtrado de datos
<div ng-controller="controlador2">
	<h1>Agenda Telefónica</h1>
	
	<label>Buscar: </label>
	<input type="search" ng-model="busqueda">

	<p ng-repeat="entrada in agenda | filter:busqueda">
		{{ entrada.nombre }} : {{ entrada.telefono }}
	</p>
</div>

<script type="text/javascript">
	var app = angular.module('v2bApp', []);

	app.controller('controlador2', ['$scope', function($scope){
		$scope.agenda = [
			{nombre:'Lincy',    telefono:'01-2250-1675'},
            {nombre:'Alexei',   telefono:'01-9250-5345'},
            {nombre:'Pizzeria', telefono:'800-NG-PIZZA'},
            {nombre:'Natalia',  telefono:'01-4250-2465'},
            {nombre:'Natalia',  telefono:'01-8650-1575'},
            {nombre:'Karol',    telefono:'01-1240-6875'},
            {nombre:'Ivanner',  telefono:'01-2950-3679'},
            {nombre:'Josue',    telefono:'01-8250-4805'}
		];
	}]);

</script>

8.	Interaccion con AngularJS - Administrar eventos en AngularJS
ng-click="expression" 
ng-dblclick="expression" 
ng-mouseleave="expression" 
ng-mouseover="expression"

9.	Modificar documentos con AngularJS
9.1.	CSS y AngularJS
<p ng-style="nuevoEstilo">
	 Yo controlo el estilo de mis aplicaciones con 
	 <span ng-class="nuevaClase">AngularJS</span> 
</p>

<script type="text/javascript">
	var app = angular.module('v2bApp', []);

	app.controller('controlador1', ['$scope', function($scope){
		$scope.newStyle = function () {
			$scope.nuevoEstilo = { 'background' : 'blue', 'color' : 'yellow' };
		};

		$scope.newClass = function () {
			$scope.nuevaClase = 'angular';
		};

		$scope.resetClass = function () {
			$scope.nuevoEstilo 	= '';
			$scope.nuevaClase 	= '';
		};
	}]);
</script>

9.2.	Mostrar y ocultar elementos
<button ng-click="showMess()">Mostrar Mensaje</button>
<button ng-click="hiddenMess()">Ocultar Mensaje</button>

<div class="alerta" ng-show="visibilidadMensaje">
	Este es un mensaje secreto
</div>

<script type="text/javascript">
	var app = angular.module('v2bApp', []);

	app.controller('controlador1', ['$scope', function($scope){
		$scope.visibilidadMensaje = false;

		$scope.showMess = function () {
			$scope.visibilidadMensaje = true;
		};

		$scope.hiddenMess = function () {
			$scope.visibilidadMensaje = false;
		};

	}]);
</script>

9.3.	Intercambiar imagenes
<img ng-src=" {{ imageData }} ">
		
		<button ng-click="cambiarImagen('ejemplo1.png')">Imagen 1</button>
		<button ng-click="cambiarImagen('ejemplo2.png')">Imagen 2</button>
<script type="text/javascript">
	var app = angular.module('v2bApp', []);

	app.controller('controlador1', ['$scope', function($scope){
		$scope.imageData = 'ejemplo1.png';

		$scope.cambiarImagen = function (imagen) {
			$scope.imageData = imagen;
		};

	}]);
</script>

10.	Routing con AngularJS
10.1	Incluir datos externos
<script src="https://code.angularjs.org/1.3.16/angular-route.min.js"></script>
<div ng-include src=" 'plantillas/encabezado.html' "></div>
<div ng-include=" 'plantillas/menu.html' "></div>
<h1>Visita el NG-ZOO</h1>
	
10.2	Administramos rutas
<div ng-view></div>
<ul class="menu">
	<li><a href="#/ave1">Ave 1</a></li>
	<li><a href="#/ave2">Ave 2</a></li>
	<li><a href="#/ave3">Ave 3</a></li>
</ul>

<script type="text/javascript">
	var app = angular.module('v2bApp', [ 'ngRoute' ]);

	app.config(['$routeProvider',function($routeProvider) {
		$routeProvider.when('/hola', {
			templateUrl : 'hola.html'
		})
		.when('/ave1', {
			templateUrl : 'plantillas/ave1.html'
		})
		.when('/ave2', {
			templateUrl : 'plantillas/ave2.html'
		})
		.when('/ave3', {
			templateUrl : 'plantillas/ave3.html'
		})
		.otherwise({
			templateUrl : 'bienvenida.html'
		});
	}]);
</script>

11.	AngularJS y Bootstrap - Instalacion de Bootstrap y AngularJS
<head>
	<title>Angular - Bootstrap</title>
	<meta charset="utf-8">
	<meta http-equiv="X-UA-Compatible" content="IE=edge">
	<meta name="viewport" content="width=device-width, initial-scale=1">

	<!-- Latest compiled and minified CSS -->
	<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/css/bootstrap.min.css">

	<!-- Optional theme -->
	<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/css/bootstrap-theme.min.css">

	<script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.4.1/angular.min.js"></script>
	<script src="https://code.angularjs.org/1.3.16/angular-route.min.js"></script>

</head>
<body ng-app="v2bApp" ng-controller="controlador1">
	
	<div ng-include=" 'menu.html' " ></div>

	<div class="jumbotron">
	    <div class="container">
	        <h1>Bienvenido al NG-ZOO</h1>
	       
	    	<input type="text" class="form-control" placeholder="Animal" 
	    		aria-describedby="basic-addon1" ng-model="animal_extra">
			
			<button type="button" class="btn btn-success" ng-click="appendAnimal()">Agregar</button>
	    </div>

	</div>

	<div class="container">
	    <ul class="list-group">
			<li class="list-group-item" ng-repeat="animal in animales">
				{{ animal }}
			</li>
        </ul>
	</div>

</body>
<script src="http://code.jquery.com/jquery.js"></script>
<!-- Latest compiled and minified JavaScript -->
<script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/js/bootstrap.min.js"></script>

<script type="text/javascript">

var app = angular.module('v2bApp', [ 'ngRoute' ]);

app.controller('controlador1', ['$scope', function($scope){
	$scope.animales = [
		'Tigre',
		'Elefante',
		'Mono',
		'Oso',
		'Rinoceronte'
	];

	$scope.appendAnimal = function () {
		$scope.animales.push($scope.animal_extra);
	};

}]);

</script>

12.	Scafolding con AngularJS - Crear proyectos AngularJS con Yeoman
- Yeoman: El propósito principal de esta herramienta es la agilización del proceso del inicio del desarrollo, esto mediante la construcción de un esqueleto bastante completo para cualquier tipo de aplicación web, este procedimiento también es conocido como scaffolding.

- Bower: para el manejo de dependencias
- Grunt: para la previsualización, ejecución de pruebas y construcción de la aplicación.
- Yo: para construir el esqueleto de la aplicación dependiendo de su tipo.

npm install -g yo bower grunt-cli gulp
mkdir appAngular
npm install -g generator-angular
yo angular [app_name]
bower install
grunt serve


#########################################


#########################################
7.1.


### 00:14:00 - 00:00:00

##########################################


##########################################




